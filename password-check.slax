version 1.2;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns jspace = "http://jspace-utils/asharp@juniper.net";
ns func extension = "http://exslt.org/functions";
ns str = "http://exslt.org/strings";


import "../import/junos.xsl";

/* @CONTEXT = "//" */
/* @NAME = "Password Validation" */
/* @DESCRIPTION = "Password Validation" */
/* @EXECUTIONTYPE = "GROUPEDEXECUTION" */
/* @PASSSPACEAUTHHEADER = "true" */
/* @ISLOCAL = "true" */
/* @PASSDEVICECREDENTIALS = "true" */
/* @VARIABLECONTEXT = "[{'name':'Password','password':'yes','parameterscope':'devicespecific'},{'name':'PasswordConfirm','password':'confirm','parameterscope':'devicespecific'}]" */

var $arguments = {
	<argument> {
		<name> "Password";
		<description> "A password parameter";
	}
	<argument> {
		<name> "PasswordConfirm";
		<description> "A password confirmation parameter";
	}
}

param $Password;
param $PasswordConfirm;

var $quot = '"';
var $esc-quot = '\\"';

match / {
	<op-script-results> {
		<output> {
			/* identify selected devices */
			var $devices = jspace:credentials();

			for-each ($devices/device) {
				<xsl:sort select="host">;
				/* parse the device specific parameters */
				var $host = host;
				expr "HOST: " _ $host _ "\n";
				var $pPassword := {<devices> {call object( $json-in = $Password );}}
				var $pPasswordConfirm := {<devices> {call object( $json-in = $PasswordConfirm );}}
				
				expr host _ "Password: \t\t" _ $pPassword/devices/device[name = $host]/value _ "\n";
				expr host _ "PasswordConfirm :\t" _ $pPasswordConfirm/devices/device[name = $host]/value _ "\n\n";
			}
		}
	}
}

<func:function name="jspace:credentials"> {
    if( $CONTEXT ) {
        var $splitCredentials = str:split( $credentials, "\\;" );
        var $targets := {
            for-each ( $splitCredentials ) {
                var $splitCredential = str:split( ., "\\:" );
                var $user-target = str:split($splitCredential[1], "\@");
                var $host = substring-before( substring-after( $deviceipmap, substring-after( $splitCredential[1], "@" ) _ "\":\"" ), "\"" );
                <device> {
                    <target> {
                        expr $user-target[2];
                    }
                    <user> {
                        expr $user-target[1];
                    }
                    <passwd> {
                        expr $splitCredential[2];
                    }
                    <host> {
                        expr $host;
                    }
                }
            }
        }
        <func:result select="$targets">;
    }
    else {
        <func:result select="false()">;
    }
}

/* display parameter values based on global, device or entity specific */
template param-dump ( $param ) {
	if ( $param/devices/device ){
		/* device specific or entity specific with only device selected */
		if ($param/devices/device/value) {
			for-each ( $param/devices/device) {
				expr "Name: " _ name _ "\tValue: " _ value _ "\n";
			}
		}
		/* entity specific with entities selected */
		else {
			for-each ( $param/devices/device) {
				expr "Name: " _ name _ "\n";
				for-each (./entity) {
					expr "\tEntity: " _ name _ "\tValue: " _ value _ "\n"; 
				}
			}
		}
	}
	/* global parameter */
	else {
		expr $param/devices;
		expr "\n";
	}
}

/* Parameter scope formats:
 * entity specific with an entity selected 
 * {"deviceA":"{\"entityA\":\"value\",\"entityB\":\"value\",...}","deviceB":"{\"entityA\":\"value\",...}",...}   
 *
 * device specific, or entity specific with no selected entity
 * {"deviceA":"value","deviceB":"value",...}
*/

template object ( $json-in , $parent-ele = "" ) {
	/* scope device/entity */
	if ( substring( $json-in, 1, 1 ) == "{" ) {
		var $t1 = substring-after( $json-in , "{" );
		call fields( $json-in = $t1 );
	}
	/* scope global */
	else {
		expr $json-in;
	}
}

template fields ( $json-in ) {
	if ( substring( $json-in, 1, 1 ) == $quot ) {
		var $t1 := {
			call field( $json-in = $json-in );
		}
		copy-of $t1;
	}
}

template field ( $json-in ) {
	var $fieldname = substring-before(substring-after( $json-in , $quot ), $quot );
	var $remainder = substring-after(substring-after(substring-after( $json-in , $quot), $quot), ":" );
	/* selected entities? */
	if ( substring($remainder,1,2) == '"{' ) {
		var $t3 := call entity( $json-in = $remainder , $parent-ele = $fieldname );
		copy-of $t3;
	}
	/* scope device */
	else if ( substring($remainder,1,1) == $quot ) {
		var $t1 := call value( $json-in = $remainder , $parent-ele = $fieldname );
		<device> {
			<name> $fieldname;
			/* value node only */
			copy-of $t1/value;
		}
		/* any more devices */
		if ( $t1/extra) {
			var $t2 = $t1/extra;
			call fields( $json-in = $t2 );
		}
	}
}

template entity ( $json-in , $parent-ele ) {
	var $entity-name = substring-before(substring-after( $json-in , '"{\\"' ), '\\"');
	var $remainder = substring-after(substring-after( $json-in , $esc-quot),$esc-quot);
	var $value = substring-before(substring-after( $remainder , ":" _ $esc-quot ), $esc-quot);
	var $remainder-entity = substring-after(substring-after( $remainder , ":" _ $esc-quot ), $esc-quot );
	<device> {
		<name> $parent-ele;
		<entity> {
			<name> $entity-name;
			if ( substring($remainder,1,1) == ":" ) {
				<value> $value;
			}
		}
		if ( substring( $remainder-entity, 1, 1 ) == "," ) {
			/* there are more entities */
			call entities( $json-in = $remainder-entity );
		}
	}
	if ( substring-after( $json-in , '","' )) {
		/* there are more devices present */
		var $remaining-device = '"' _ substring-after( $json-in , '","' );
		call fields( $json-in = $remaining-device );
	}
}

template entities ( $json-in ){
	var $t1 = substring-after($json-in,",");
	var $entity-name = substring-before(substring-after( $t1 , '\\"' ), '\\"');
	var $remainder = substring-after(substring-after($t1,  '\\"' ), '\\"' );
	var $value = substring-before(substring-after( $remainder , ":" _ $esc-quot ), $esc-quot);
	var $extra = substring-after(substring-after( $remainder , ":" _ $esc-quot ), $esc-quot);
	<entity> {
		<name> $entity-name;
		<value> $value;
	}
	/* there are more entities to process */
	if ( substring($extra , 1, 1 ) == "," ){
		call entities ( $json-in = $extra );
	}

}

template value ( $json-in , $parent-ele ) {
	var $first-letter = substring( $json-in , 1, 1 );
	if ( $first-letter == $quot ) {
		call string( $json-in = $json-in , $parent-ele = $parent-ele );
	}
}

template string ( $json-in , $parent-ele ) {
	var $value = substring-before(substring-after( $json-in , $quot ), $quot);
	var $remainder = substring-after(substring-after( $json-in, $quot ), $quot);
	<value> $value;
	/* add additional data if more entries remain */
	if ( substring( $remainder,1,1) == "," ) {
		var $t1 = substring-after($remainder, ",");
		/* the <extra> node gets processed by the field template */
		/* until all the data has been processed                 */
		<extra> $t1;
	}
}
